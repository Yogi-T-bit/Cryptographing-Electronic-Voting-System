// <auto-generated />
using System;
using CryptographingElectronicVotingSystem.Dal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptographingElectronicVotingSystem.Dal.Migrations.ElectronicVotingSystem
{
    [DbContext(typeof(ElectronicVotingSystemContext))]
    [Migration("20240330205542_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.candidate", b =>
                {
                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Party")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CandidateID");

                    b.ToTable("candidates", t =>
                        {
                            t.HasTrigger("candidates_Trigger");
                        });
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.tallyingcenter", b =>
                {
                    b.Property<int>("CenterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CenterPublicKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CenterID");

                    b.ToTable("tallyingcenters", t =>
                        {
                            t.HasTrigger("tallyingcenters_Trigger");
                        });
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.vote", b =>
                {
                    b.Property<int>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CandidateID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("VoteProof")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("VoterID")
                        .HasColumnType("bigint");

                    b.HasKey("VoteID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("VoterID");

                    b.ToTable("votes", t =>
                        {
                            t.HasTrigger("votes_Trigger");
                        });
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.voter", b =>
                {
                    b.Property<long>("VoterID")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasVoted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("VoterPublicKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("VoterID");

                    b.ToTable("voters", t =>
                        {
                            t.HasTrigger("voters_Trigger");
                        });
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.votetally", b =>
                {
                    b.Property<int>("TallyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int?>("CenterID")
                        .HasColumnType("int");

                    b.Property<int?>("VoteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("TallyID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("CenterID");

                    b.ToTable("votetally", t =>
                        {
                            t.HasTrigger("votetally_Trigger");
                        });
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.vote", b =>
                {
                    b.HasOne("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.candidate", "candidate")
                        .WithMany("votes")
                        .HasForeignKey("CandidateID");

                    b.HasOne("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.voter", "voter")
                        .WithMany("votes")
                        .HasForeignKey("VoterID");

                    b.Navigation("candidate");

                    b.Navigation("voter");
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.votetally", b =>
                {
                    b.HasOne("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.candidate", "candidate")
                        .WithMany("votetallies")
                        .HasForeignKey("CandidateID");

                    b.HasOne("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.tallyingcenter", "tallyingcenter")
                        .WithMany("votetallies")
                        .HasForeignKey("CenterID");

                    b.Navigation("candidate");

                    b.Navigation("tallyingcenter");
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.candidate", b =>
                {
                    b.Navigation("votes");

                    b.Navigation("votetallies");
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.tallyingcenter", b =>
                {
                    b.Navigation("votetallies");
                });

            modelBuilder.Entity("CryptographingElectronicVotingSystem.Dal.Models.ElectronicVotingSystem.voter", b =>
                {
                    b.Navigation("votes");
                });
#pragma warning restore 612, 618
        }
    }
}
